# Do not edit this file
import torch
from os.path import join
from torch.utils.data import DataLoader
from pytorch_lightning import Trainer

from fashion.system import ProductionDataset, FashionClassifierSystem
from fashion.paths import DATA_DIR, CHECKPOINT_DIR
from fashion.strategies import (
  random_sampling,
  uncertainty_sampling,
  margin_sampling,
  entropy_sampling,
)


def main(args):
  '''Simulates an annotation process. This script will run a strategy and provide 
  annotations for a subset of chosen indices. It will save the chosen examples and 
  labels to an output file.

  :param strategy: annotation strategy (default: random)
  :param budget: number of examples to label (default: 1000)
  '''
  # load the production data
  ds = ProductionDataset(join(DATA_DIR, 'production/dataset.pt'))
  dl = DataLoader(ds, batch_size=10)
  
  # Fetch all the predicted probabilities which we will need for the annotation strategies
  checkpoint_path = join(CHECKPOINT_DIR, 'model.ckpt')
  system = FashionClassifierSystem.load_from_checkpoint(checkpoint_path)
  pred_logits = Trainer().predict(system, dataloaders = dl, return_predictions = True, ckpt_path = checkpoint_path)
  pred_logits = torch.cat(pred_logits, dim=0)
  pred_probs = torch.softmax(pred_logits, dim=1) # Convert logits to probs

  # Execute the strategy
  if args.strategy == "random":
    indices = random_sampling(pred_probs, budget = args.budget)
  elif args.strategy == "uncertainty":
    indices = uncertainty_sampling(pred_probs, budget = args.budget)
  elif args.strategy == "margin":
    indices = margin_sampling(pred_probs, budget = args.budget)
  elif args.strategy == "entropy":
    indices = entropy_sampling(pred_probs, budget = args.budget)
  else:
    raise Exception(f'Strategy {args.strategy} is not a supported option.')

  # Fetch the images and labels and save them as a set
  annotated_images = torch.stack([ds.images[i] for i in indices])
  annotated_labels = torch.Tensor([ds.hidden_labels[i] for i in indices])

  out_file = join(DATA_DIR, f'production/{args.strategy}.pt')
  torch.save({'images': annotated_images, 'labels': annotated_labels}, out_file)
  print(f'Annotated dataset saved to {out_file}')


if __name__ == "__main__":
  import argparse
  parser = argparse.ArgumentParser()
  parser.add_argument('--strategy', type=str, default='random', 
                      choices=['random', 'uncertainty', 'margin', 'entropy'],
                      help='Annotation strategy (default: random)',
                      )
  parser.add_argument('--budget', type=int, default=1000, 
                      help='Annotation budget (default: 1000)',
                      )
  args = parser.parse_args()
  main(args)
